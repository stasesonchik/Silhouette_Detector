import os
from uuid import uuid4
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

TOKEN = "7594137884:AAHvigig7KcStYeVcubHrZ0Na4ftrfUyZT0"
input_dir = "/Users/stanislavmalarcuk/Desktop/videos/input"
output_dir = "/Users/stanislavmalarcuk/Desktop/videos/output"


class Bot:
    def __init__(self, token: str):
        self.token = token
        self.app = ApplicationBuilder().token(self.token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
        self.app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, self.media_handler))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ

    async def main_menu(self, update_or_query, context):
        keyboard = [
            [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_action")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if isinstance(update_or_query, Update) and update_or_query.message:
            await update_or_query.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        else:
            await update_or_query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    # –ü–æ–¥–º–µ–Ω—é "–ò–Ω—Ñ–æ"
    async def info_menu(self, query):
        keyboard = [
            [InlineKeyboardButton("ü§ñ –û –±–æ—Ç–µ", callback_data="about_bot")],
            [InlineKeyboardButton("üë®‚Äçüíª –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö", callback_data="about_devs")],
            [InlineKeyboardButton("üìò –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about_project")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç:", reply_markup=reply_markup)

    # –ö–æ–º–∞–Ω–¥–∞ /start
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.main_menu(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        match query.data:
            case "start_action":
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ 2 –º–∏–Ω—É—Ç.", reply_markup=reply_markup)

            case "info_menu":
                await self.info_menu(query)

            case "about_bot":
                await query.edit_message_text(
                    text="ü§ñ –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –ø—Ä–æ–µ–∫—Ç–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="info_menu")]])
                )

            case "about_devs":
                await query.edit_message_text(
                    text="üë®‚Äçüíª –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–º–∏ Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="info_menu")]])
                )

            case "about_project":
                await query.edit_message_text(
                    text="üìò –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Telegram-–±–æ—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="info_menu")]])
                )

            case "go_back":
                await self.main_menu(query, context)

            case _:
                await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
    async def media_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
        if update.message.video:
            media = update.message.video
            file_ext = "mp4"
        elif update.message.photo:
            media = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_ext = "jpg"
        else:
            await update.message.reply_text("‚ùì –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        os.makedirs(input_dir, exist_ok=True)  # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(output_dir, exist_ok=True)  # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è output, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"{uuid4()}.{file_ext}"
        full_path = os.path.join(input_dir, file_name)

        # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –Ω–∞ –¥–∏—Å–∫
        file = await context.bot.get_file(media.file_id)
        await file.download_to_drive(full_path)

        await update.message.reply_text(f"‚úÖ {file_ext.upper()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self.send_media_to_user(update.effective_chat.id, full_path, file_ext, context)

        os.remove(full_path)

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
    async def send_media_to_user(self, chat_id: int, media_path: str, file_ext: str, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ chat_id –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏."""
        if not os.path.isfile(media_path):
            print(f"–§–∞–π–ª {media_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            with open(media_path, 'rb') as media_file:
                if file_ext == "mp4":
                    await context.bot.send_video(
                        chat_id=chat_id,
                        video=InputFile(media_file),
                        caption="üé¨ –í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ:"
                    )
                elif file_ext == "jpg":
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=InputFile(media_file),
                        caption="üñº –í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"
                    )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")

    def run(self):
        self.app.run_polling()


if __name__ == "__main__":
    bot = Bot(TOKEN)
    bot.run()
