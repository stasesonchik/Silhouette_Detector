window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "base", "modulename": "base", "kind": "module", "doc": "<p>This module is the core for the Base Detector.\nIt contains an API for communicating with the video analytics manager.\nIt also has a method for getting frames and time from a video stream,\nprocessing them and saving the results. It also has methods for other detectors\nthat should be redefined for processing by a specific detector.</p>\n"}, {"fullname": "base.Base", "modulename": "base", "qualname": "Base", "kind": "class", "doc": "<p>Core of the Base Detector.</p>\n", "bases": "abc.ABC"}, {"fullname": "base.Base.logger", "modulename": "base", "qualname": "Base.logger", "kind": "variable", "doc": "<p>A logger for displaying various information.</p>\n", "annotation": ": logging.Logger"}, {"fullname": "base.Base.task_params", "modulename": "base", "qualname": "Base.task_params", "kind": "variable", "doc": "<p>It stores all the parameters for each running task.</p>\n", "annotation": ": dict[int, utils.dataclasses.TaskParameters]"}, {"fullname": "base.Base.trackers", "modulename": "base", "qualname": "Base.trackers", "kind": "variable", "doc": "<p>It stores all the object trackers in the video for each running task.</p>\n", "annotation": ": dict[int, SFSORT.SFSORT.SFSORT]"}, {"fullname": "base.Base.timestamps", "modulename": "base", "qualname": "Base.timestamps", "kind": "variable", "doc": "<p>It stores all timestamps of the last processed frame for each running task.</p>\n", "annotation": ": dict[int, queue.Queue]"}, {"fullname": "base.Base.app", "modulename": "base", "qualname": "Base.app", "kind": "variable", "doc": "<p>The application object for communication with the video analytics manager.</p>\n", "annotation": ": fastapi.applications.FastAPI"}, {"fullname": "base.Base.pre_process", "modulename": "base", "qualname": "Base.pre_process", "kind": "function", "doc": "<p>Adjusts the dimensions of the original image to those required\nfor processing without changing the aspect ratio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_img</strong> (ndarray):\nThe original image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>img</strong> (ndarray):\nThe resized image.</li>\n<li><strong>ratio</strong> (float):\nThe aspect ratio of the image to be processed relative\nto the original one.</li>\n<li><strong>dwdh</strong> (tuple[float, float]):\nIt contains paddings in width and height, respectively.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "base.Base.inference", "modulename": "base", "qualname": "Base.inference", "kind": "function", "doc": "<p>Processes the image with a neural network.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (ndarray):\nThe image to be processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>output</strong> (ndarray):\nThe results of image processing by a neural network.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "base.Base.post_process", "modulename": "base", "qualname": "Base.post_process", "kind": "function", "doc": "<p>Processes the results from the neural network and presents them as:\nbbox coordinates, class, accuracy - for each found object in the frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>outputs</strong> (ndarray):\nThe results obtained from neural network processing.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>boxes</strong> (np.ndarray | None):\nAn array of bounding box coordinates, where each box is represented\nas [x_min, y_min, x_max, y_max]. None if no objects are detected.</li>\n<li><strong>classes</strong> (np.ndarray | None):\nAn array of class indices corresponding to the detected objects.\nNone if no objects are detected.</li>\n<li><strong>scores</strong> (np.ndarray | None):\nAn array of confidence scores (or probabilities) associated with\neach detected object. None if no objects are detected.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "base.Base.draw_ROI", "modulename": "base", "qualname": "Base.draw_ROI", "kind": "function", "doc": "<p>Highlights the region of interest by coordinates</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (ndarray):\nThe original image.</li>\n<li><strong>cornerUp</strong> (int):\nThe coordinate of the upper-left corner in height</li>\n<li><strong>cornerLeft</strong> (int):\nThe coordinate of the upper-left corner in width</li>\n<li><strong>cornerBottom</strong> (int):\nThe coordinate of the lower-right corner in height</li>\n<li><strong>cornerRight</strong> (int):\nThe coordinate of the lower-right corner in width</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>inf_img</strong> (ndarray):\nAn image with the selected region of interest</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">corners</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "base.Base.draw_results", "modulename": "base", "qualname": "Base.draw_results", "kind": "function", "doc": "<p>Draws all found objects, their classes, confidence, and\ntrack ID on the source frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (ndarray):\nThe original image.</li>\n<li><strong>dets</strong> (list of list):\nA list of all the properties of each object in the frame\n(coordinates of the bounding box, class, accuracy).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>inf_img</strong> (ndarray):\nAn image with all the selected objects and their properties.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">dets</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "base.Base.run", "modulename": "base", "qualname": "Base.run", "kind": "function", "doc": "<p>Runs the object detection and tracking pipeline on the given image.</p>\n\n<p>This method processes an input image, performs inference to detect objects,\napplies post-processing to refine detections, and uses a tracker to maintain\nobject identities across frames.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (np.ndarray):\nThe input image for object detection, represented as a NumPy array.</li>\n<li><strong>task_id</strong> (int):\nThe identifier for the current task, used to manage trackers for\nmulti-task scenarios.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dets</strong> (list):\nA list of detected and tracked objects. Each element in the list is a\nsub-list containing the following information:\n<ul>\n<li>x0, y0, x1, y1 (int): Bounding box coordinates for the detected object.</li>\n<li>class_id (int): The class index of the detected object.</li>\n<li>tracker_id (int): The ID assigned to the object by the tracker.</li>\n<li>score (float): The confidence score of the detection.\nReturns an empty list if no objects are detected.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">task_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "detector", "modulename": "detector", "kind": "module", "doc": "<p>This module is a basic detector. It is the basis for other detectors\nusing neural networks. By itself, it is able to run the basic YOLOv8 model\nand process a segment from the provided video stream, returning the results\nto the video analytics manager in the form of a json file and an annotated video.</p>\n"}, {"fullname": "detector.Detector", "modulename": "detector", "qualname": "Detector", "kind": "class", "doc": "<p>A base detector designed to be inherited by other detectors\nthat use neural networks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_path</strong> (str):\nFilename or serialized ONNX or ORT format model in a byte string.</li>\n</ul>\n", "bases": "base.Base"}, {"fullname": "detector.Detector.__init__", "modulename": "detector", "qualname": "Detector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "detector.Detector.CONF_TH", "modulename": "detector", "qualname": "Detector.CONF_TH", "kind": "variable", "doc": "<p>The confidence threshold for the results of the onnx model.</p>\n", "default_value": "0.5"}, {"fullname": "detector.Detector.IOU_TH", "modulename": "detector", "qualname": "Detector.IOU_TH", "kind": "variable", "doc": "<p>The threshold of intersection over union for the results of the onnx model.</p>\n", "default_value": "0.5"}, {"fullname": "detector.Detector.session", "modulename": "detector", "qualname": "Detector.session", "kind": "variable", "doc": "<p>An onnx session to launch the model.</p>\n"}, {"fullname": "detector.Detector.input_name", "modulename": "detector", "qualname": "Detector.input_name", "kind": "variable", "doc": "<p>The name of the input metadata.</p>\n", "annotation": ": str"}, {"fullname": "detector.Detector.output_name", "modulename": "detector", "qualname": "Detector.output_name", "kind": "variable", "doc": "<p>The name of the output metadata.</p>\n", "annotation": ": list[str]"}, {"fullname": "detector.Detector.lock", "modulename": "detector", "qualname": "Detector.lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "detector.Detector.letterbox", "modulename": "detector", "qualname": "Detector.letterbox", "kind": "function", "doc": "<p>Resizes and pads an image to fit a new shape while maintaining aspect ratio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>im</strong> (np.ndarray):\nThe input image to be resized and padded.</li>\n<li><strong>new_shape</strong> (tuple[int, int], optional):\nThe desired output shape (height, width). Default is (640, 640).</li>\n<li><strong>color</strong> (tuple[int, int, int], optional):\nThe color for padding. Default is (114, 114, 114).</li>\n<li><strong>auto</strong> (bool, optional):\nIf True, adjusts padding to be a multiple of stride. Default is True.</li>\n<li><strong>scaleup</strong> (bool, optional):\nIf True, allows scaling up the image. If False, only scales down. Default is True.</li>\n<li><strong>stride</strong> (int, optional):\nThe stride for padding adjustment. Default is 32.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, float, tuple[float, float]]</strong>: A tuple containing the resized and padded image,\nthe scaling ratio, and the padding values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">im</span>,</span><span class=\"param\">\t<span class=\"n\">new_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">640</span><span class=\"p\">,</span> <span class=\"mi\">640</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">auto</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">scaleup</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">32</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "detector.Detector.pre_process", "modulename": "detector", "qualname": "Detector.pre_process", "kind": "function", "doc": "<p>Adjusts the dimensions of the original image to those required\nfor processing without changing the aspect ratio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_img</strong> (ndarray):\nThe original image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>img</strong> (ndarray):\nThe resized image.</li>\n<li><strong>ratio</strong> (float):\nThe aspect ratio of the image to be processed relative\nto the original one.</li>\n<li><strong>dwdh</strong> (tuple[float, float]):\nIt contains paddings in width and height, respectively.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "detector.Detector.inference", "modulename": "detector", "qualname": "Detector.inference", "kind": "function", "doc": "<p>Processes the image with a neural network.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (ndarray):\nThe image to be processed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>output</strong> (ndarray):\nThe results of image processing by a neural network.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "detector.Detector.post_process", "modulename": "detector", "qualname": "Detector.post_process", "kind": "function", "doc": "<p>Processes the results from the neural network and presents them as:\nbbox coordinates, class, accuracy - for each found object in the frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>outputs</strong> (ndarray):\nThe results obtained from neural network processing.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>boxes</strong> (np.ndarray | None):\nAn array of bounding box coordinates, where each box is represented\nas [x_min, y_min, x_max, y_max]. None if no objects are detected.</li>\n<li><strong>classes</strong> (np.ndarray | None):\nAn array of class indices corresponding to the detected objects.\nNone if no objects are detected.</li>\n<li><strong>scores</strong> (np.ndarray | None):\nAn array of confidence scores (or probabilities) associated with\neach detected object. None if no objects are detected.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "api", "modulename": "api", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "api.create_app", "modulename": "api", "qualname": "create_app", "kind": "function", "doc": "<p>Creates a FastAPI application and registers a router for task handling.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>task_params</strong> (dict[int, TaskParameters]):\nA dictionary mapping task IDs (int) to <code>TaskParameters</code> instances, defining\nthe parameters for each task.</li>\n<li><strong>func</strong> (Callable[..., Any]):\nA callable function to be executed for task processing.</li>\n<li><strong>logger</strong> (Logger):\nA <code>Logger</code> instance for logging application events and task activity.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>FastAPI</strong>: A configured FastAPI application instance.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The function uses <code>create_router</code> to generate a router with the specified\n<code>task_params</code>, <code>func</code>, and <code>logger</code>.</li>\n<li>The created router is then included in the FastAPI application.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">task_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">TaskParameters</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fastapi</span><span class=\"o\">.</span><span class=\"n\">applications</span><span class=\"o\">.</span><span class=\"n\">FastAPI</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data", "modulename": "api.request_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "api.request_data.BackgroundThread", "modulename": "api.request_data", "qualname": "BackgroundThread", "kind": "class", "doc": "<p>A base class for creating background threads with controlled startup, handling,\nand shutdown operations.</p>\n\n<p>This class extends <code>Thread</code> and provides methods for starting, stopping, and\nperforming tasks in a loop. Subclasses should implement the <code>startup</code>,\n<code>handle</code>, and <code>shutdown</code> methods.</p>\n", "bases": "threading.Thread"}, {"fullname": "api.request_data.BackgroundThread.__init__", "modulename": "api.request_data", "qualname": "BackgroundThread.__init__", "kind": "function", "doc": "<p>Initializes the BackgroundThread.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group</strong> (None, optional):\nReserved for future extension, always set to None.</li>\n<li><strong>target</strong> (Callable[..., object], optional):\nThe callable object to invoke in the thread.</li>\n<li><strong>name</strong> (str, optional):\nThe thread name.</li>\n<li><strong>args</strong> (Iterable[Any], optional):\nThe arguments to pass to the target callable.</li>\n<li><strong>kwargs</strong> (Mapping[str, Any], optional):\nA dictionary of keyword arguments to pass to the target callable.</li>\n<li><strong>daemon</strong> (bool, optional):\nIf True, the thread runs as a daemon.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">daemon</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "api.request_data.BackgroundThread.stop", "modulename": "api.request_data", "qualname": "BackgroundThread.stop", "kind": "function", "doc": "<p>Signals the thread to stop by setting the stop event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data.BackgroundThread.startup", "modulename": "api.request_data", "qualname": "BackgroundThread.startup", "kind": "function", "doc": "<p>Initializes resources or performs preliminary setup for the thread.\nMust be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data.BackgroundThread.handle", "modulename": "api.request_data", "qualname": "BackgroundThread.handle", "kind": "function", "doc": "<p>Contains the main logic to execute repeatedly in the thread.\nMust be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data.BackgroundThread.shutdown", "modulename": "api.request_data", "qualname": "BackgroundThread.shutdown", "kind": "function", "doc": "<p>Cleans up resources or performs final operations after the thread stops.\nMust be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data.BackgroundThread.run", "modulename": "api.request_data", "qualname": "BackgroundThread.run", "kind": "function", "doc": "<p>Starts the thread's workflow, running <code>startup</code>, then repeatedly calling\n<code>handle</code> until stopped, and finally calling <code>shutdown</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data.RequestPostData", "modulename": "api.request_data", "qualname": "RequestPostData", "kind": "class", "doc": "<p>A specialized background thread class for periodically sending image data and\nrelated metadata to specified endpoints via HTTP POST requests.</p>\n", "bases": "BackgroundThread"}, {"fullname": "api.request_data.RequestPostData.__init__", "modulename": "api.request_data", "qualname": "RequestPostData.__init__", "kind": "function", "doc": "<p>Initializes the RequestPostData thread with specified endpoints and a logger.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group</strong> (None, optional):\nReserved for future extension, always set to None.</li>\n<li><strong>target</strong> (Callable[..., object], optional):\nThe callable object to invoke in the thread.</li>\n<li><strong>name</strong> (str, optional):\nThe thread name.</li>\n<li><strong>args</strong> (Iterable[Any], optional):\nThe arguments to pass to the target callable.</li>\n<li><strong>kwargs</strong> (Mapping[str, Any], optional):\nA dictionary of keyword arguments to pass to the target callable.</li>\n<li><strong>daemon</strong> (bool, optional):\nIf True, the thread runs as a daemon.</li>\n<li><strong>logger</strong> (Logger):\nLogger for logging thread operations.</li>\n<li><strong>url_frame</strong> (str):\nThe endpoint for sending image data.</li>\n<li><strong>url_data</strong> (str):\nThe endpoint for sending metadata.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">Ellipsis</span>,</span><span class=\"param\">\t<span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">daemon</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">url_frame</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">url_data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "api.request_data.RequestPostData.url_frame", "modulename": "api.request_data", "qualname": "RequestPostData.url_frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "api.request_data.RequestPostData.url_data", "modulename": "api.request_data", "qualname": "RequestPostData.url_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "api.request_data.RequestPostData.logger", "modulename": "api.request_data", "qualname": "RequestPostData.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "api.request_data.RequestPostData.queue", "modulename": "api.request_data", "qualname": "RequestPostData.queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "api.request_data.RequestPostData.is_run", "modulename": "api.request_data", "qualname": "RequestPostData.is_run", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "api.request_data.RequestPostData.handle", "modulename": "api.request_data", "qualname": "RequestPostData.handle", "kind": "function", "doc": "<p>Executes the thread's main task, asynchronously sending data and images.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data.RequestPostData.startup", "modulename": "api.request_data", "qualname": "RequestPostData.startup", "kind": "function", "doc": "<p>Logs the startup of the RequestPostData thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data.RequestPostData.shutdown", "modulename": "api.request_data", "qualname": "RequestPostData.shutdown", "kind": "function", "doc": "<p>Logs the shutdown of the RequestPostData thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "api.request_data.RequestPostData.put", "modulename": "api.request_data", "qualname": "RequestPostData.put", "kind": "function", "doc": "<p>Adds an image and its associated metadata to the queue for processing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>frame</strong> (np.ndarray):\nThe processed image in NumPy array format.</li>\n<li><strong>data</strong> (dict):\nMetadata or additional information associated with the frame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "api.tasks", "modulename": "api.tasks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "api.tasks.create_router", "modulename": "api.tasks", "qualname": "create_router", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">task_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">TaskParameters</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fastapi</span><span class=\"o\">.</span><span class=\"n\">routing</span><span class=\"o\">.</span><span class=\"n\">APIRouter</span>:</span></span>", "funcdef": "def"}, {"fullname": "config", "modulename": "config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "config.Config", "modulename": "config", "qualname": "Config", "kind": "class", "doc": "<p>A dictionary-like configuration manager that allows loading, modifying,\nand saving configuration data from a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path_to_cfg</strong> (str):\nThe path to the configuration JSON file.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_path</strong> (str):\nThe file path to the configuration JSON file.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>upload() -> bool\n    Saves the current configuration back to the file.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The class initializes by loading the JSON data from the specified file\nand populating the dictionary with its contents.</li>\n<li>Changes made to the configuration can be saved to the file using the\n<code>upload</code> method.</li>\n</ul>\n", "bases": "builtins.dict"}, {"fullname": "config.Config.__init__", "modulename": "config", "qualname": "Config.__init__", "kind": "function", "doc": "<p>Initializes the Config object by loading data from the specified JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path_to_cfg</strong> (str):\nThe file path to the configuration JSON file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path_to_cfg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "config.Config.upload", "modulename": "config", "qualname": "Config.upload", "kind": "function", "doc": "<p>Saves the current configuration back to the file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: Returns <code>True</code> if the configuration is successfully saved, otherwise <code>False</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The method writes the current state of the dictionary to the JSON file\nspecified by <code>_path</code>, formatted with an indentation of 4 spaces.</li>\n<li>In case of an error (e.g., file permissions or disk issues), the method\ncatches the exception and returns <code>False</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "config.general_cfg", "modulename": "config", "qualname": "general_cfg", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;manager_port&#x27;: 5001, &#x27;quality_post_image&#x27;: 50, &#x27;framerate&#x27;: 10, &#x27;working_time_sec&#x27;: 30, &#x27;tracker_args&#x27;: {&#x27;dynamic_tuning&#x27;: True, &#x27;cth&#x27;: 0.7, &#x27;high_th&#x27;: 0.7, &#x27;high_th_m&#x27;: 0.1, &#x27;match_th_first&#x27;: 0.6, &#x27;match_th_first_m&#x27;: 0.05, &#x27;match_th_second&#x27;: 0.4, &#x27;low_th&#x27;: 0.2, &#x27;new_track_th&#x27;: 0.5, &#x27;new_track_th_m&#x27;: 0.1, &#x27;marginal_timeout&#x27;: 17.0, &#x27;central_timeout&#x27;: 25.0, &#x27;horizontal_margin&#x27;: 192, &#x27;vertical_margin&#x27;: 108, &#x27;frame_width&#x27;: 1920, &#x27;frame_height&#x27;: 1080}}"}, {"fullname": "logger", "modulename": "logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "logger.create_logger", "modulename": "logger", "qualname": "create_logger", "kind": "function", "doc": "<p>Creates and configures a logger instance based on a predefined JSON configuration file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nThe name of the logger, which will also be used to name the log file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>logging.Logger</strong>: A configured logger instance.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The function loads the logging configuration from a <code>config.json</code> file\nlocated in the same directory as the script.</li>\n<li>Updates the file handler's <code>filename</code> property to write logs to a file\nnamed <code>{name}.log</code> inside a <code>logs</code> directory.</li>\n<li>Ensures the <code>logs</code> directory exists; creates it if it does not.</li>\n<li>Applies the logging configuration using <code>logging.config.dictConfig</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "schemas", "modulename": "schemas", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "schemas.inference_parameters", "modulename": "schemas.inference_parameters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "schemas.inference_parameters.FFprobeParameters", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters", "kind": "class", "doc": "<p>Represents video metadata parameters extracted using FFprobe.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>width</strong> (int):\nThe width of the video in pixels.</li>\n<li><strong>height</strong> (int):\nThe height of the video in pixels.</li>\n<li><strong>fps</strong> (float):\nThe frames per second (FPS) of the video.</li>\n<li><strong>frame_interval</strong> (float):\nThe interval between frames, calculated as REAL_FPS / DESIRED_FPS.</li>\n<li><strong>duration</strong> (float):\nThe total duration of the video in seconds.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "schemas.inference_parameters.FFprobeParameters.width", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "schemas.inference_parameters.FFprobeParameters.height", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters.height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "schemas.inference_parameters.FFprobeParameters.fps", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters.fps", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "schemas.inference_parameters.FFprobeParameters.frame_interval", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters.frame_interval", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "schemas.inference_parameters.FFprobeParameters.duration", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters.duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "schemas.inference_parameters.FFprobeParameters.model_config", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "schemas.inference_parameters.FFprobeParameters.model_fields", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;width&#x27;: FieldInfo(annotation=int, required=True), &#x27;height&#x27;: FieldInfo(annotation=int, required=True), &#x27;fps&#x27;: FieldInfo(annotation=float, required=True), &#x27;frame_interval&#x27;: FieldInfo(annotation=float, required=True), &#x27;duration&#x27;: FieldInfo(annotation=float, required=True)}"}, {"fullname": "schemas.inference_parameters.FFprobeParameters.model_computed_fields", "modulename": "schemas.inference_parameters", "qualname": "FFprobeParameters.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters", "kind": "class", "doc": "<p>Represents the parameters for an inference cycle, including video metadata,\nreal-time settings, and frame counts.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>results</strong> (dict[int, list]):\nA dictionary in which the keys are the timestamps of the frame,\nand the values are lists of the results of processing this frame by the detector.\nDefaults to an empty dictionary.</li>\n<li><strong>is_realtime</strong> (bool):\nSpecifies if the inference cycle operates in real-time mode. Defaults to <code>False</code>.</li>\n<li><strong>current_frame</strong> (int):\nThe index of the current frame being processed. Defaults to 0.</li>\n<li><strong>ffprobe_params</strong> (FFprobeParameters):\nAn instance of <code>FFprobeParameters</code> containing video metadata.</li>\n<li><strong>total_frame</strong> (float):\nThe total number of frames to process. Defaults to infinity.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>compute_total_frame_and_duration()\n    Adjusts <code>total_frame</code> and <code>duration</code> based on whether the cycle is in real-time mode.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.results", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[int, list]"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.is_realtime", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.is_realtime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.current_frame", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.current_frame", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.ffprobe_params", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.ffprobe_params", "kind": "variable", "doc": "<p></p>\n", "annotation": ": schemas.inference_parameters.FFprobeParameters"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.total_frame", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.total_frame", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.compute_total_frame_and_duration", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.compute_total_frame_and_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.model_config", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.model_fields", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;results&#x27;: FieldInfo(annotation=dict[int, list], required=False, default={}), &#x27;is_realtime&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;current_frame&#x27;: FieldInfo(annotation=int, required=False, default=0), &#x27;ffprobe_params&#x27;: FieldInfo(annotation=FFprobeParameters, required=True), &#x27;total_frame&#x27;: FieldInfo(annotation=float, required=False, default=inf)}"}, {"fullname": "schemas.inference_parameters.InferenceCycleParameters.model_computed_fields", "modulename": "schemas.inference_parameters", "qualname": "InferenceCycleParameters.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "utils", "modulename": "utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.dataclasses", "modulename": "utils.dataclasses", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.dataclasses.StatusTask", "modulename": "utils.dataclasses", "qualname": "StatusTask", "kind": "class", "doc": "<p>Represents the various statuses a task can have during its lifecycle.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "utils.dataclasses.StatusTask.INIT", "modulename": "utils.dataclasses", "qualname": "StatusTask.INIT", "kind": "variable", "doc": "<p>The task is ready to be completed</p>\n", "default_value": "&lt;StatusTask.INIT: 0&gt;"}, {"fullname": "utils.dataclasses.StatusTask.RUNNING", "modulename": "utils.dataclasses", "qualname": "StatusTask.RUNNING", "kind": "variable", "doc": "<p>The task is running</p>\n", "default_value": "&lt;StatusTask.RUNNING: 1&gt;"}, {"fullname": "utils.dataclasses.StatusTask.STOPPED", "modulename": "utils.dataclasses", "qualname": "StatusTask.STOPPED", "kind": "variable", "doc": "<p>The task was interrupted</p>\n", "default_value": "&lt;StatusTask.STOPPED: 2&gt;"}, {"fullname": "utils.dataclasses.StatusTask.COMPLETED", "modulename": "utils.dataclasses", "qualname": "StatusTask.COMPLETED", "kind": "variable", "doc": "<p>The task did completed correctrly</p>\n", "default_value": "&lt;StatusTask.COMPLETED: 3&gt;"}, {"fullname": "utils.dataclasses.StatusTask.ERROR", "modulename": "utils.dataclasses", "qualname": "StatusTask.ERROR", "kind": "variable", "doc": "<p>The task did not finish correctly</p>\n", "default_value": "&lt;StatusTask.ERROR: 4&gt;"}, {"fullname": "utils.dataclasses.StatusTask.UNKNOWN", "modulename": "utils.dataclasses", "qualname": "StatusTask.UNKNOWN", "kind": "variable", "doc": "<p>reserved</p>\n", "default_value": "&lt;StatusTask.UNKNOWN: 5&gt;"}, {"fullname": "utils.dataclasses.TaskParameters", "modulename": "utils.dataclasses", "qualname": "TaskParameters", "kind": "class", "doc": "<p>A class for all parameters of the processing task.</p>\n"}, {"fullname": "utils.dataclasses.TaskParameters.__init__", "modulename": "utils.dataclasses", "qualname": "TaskParameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">host_ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inference_status</span><span class=\"p\">:</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">StatusTask</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">StatusTask</span><span class=\"o\">.</span><span class=\"n\">INIT</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">frame_processed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">progress</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ts_last_processed</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "utils.dataclasses.TaskParameters.host_ip", "modulename": "utils.dataclasses", "qualname": "TaskParameters.host_ip", "kind": "variable", "doc": "<p>The address of the device from which the request came, for the running task.</p>\n", "annotation": ": str"}, {"fullname": "utils.dataclasses.TaskParameters.inference_status", "modulename": "utils.dataclasses", "qualname": "TaskParameters.inference_status", "kind": "variable", "doc": "<p>The status of the running task.</p>\n", "annotation": ": utils.dataclasses.StatusTask", "default_value": "&lt;StatusTask.INIT: 0&gt;"}, {"fullname": "utils.dataclasses.TaskParameters.frame_processed", "modulename": "utils.dataclasses", "qualname": "TaskParameters.frame_processed", "kind": "variable", "doc": "<p>The ID of processed frames for the running task.</p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "utils.dataclasses.TaskParameters.progress", "modulename": "utils.dataclasses", "qualname": "TaskParameters.progress", "kind": "variable", "doc": "<p>The video processing progress of the running task.</p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "utils.dataclasses.TaskParameters.ts_last_processed", "modulename": "utils.dataclasses", "qualname": "TaskParameters.ts_last_processed", "kind": "variable", "doc": "<p>The timestamp of the last processed frame for the running task.</p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "utils.validate", "modulename": "utils.validate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "utils.validate.validate_unix_timestamp", "modulename": "utils.validate", "qualname": "validate_unix_timestamp", "kind": "function", "doc": "<p>Validates whether the given timestamp is a valid Unix timestamp.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timestamp</strong> (int or str):\nThe timestamp to validate. It can be an integer or a string\nrepresenting a Unix timestamp.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: Returns <code>True</code> if the timestamp is valid and falls within\nthe sensible range of years (1970-3000). Otherwise, returns <code>False</code>.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>The function ensures the timestamp is a valid integer and can be\nconverted to a <code>struct_time</code> object using <code>time.gmtime()</code>.</li>\n<li>Timestamps outside the Unix epoch range or exceeding system capabilities\n(e.g., year &lt; 1970 or year &gt; 3000) are considered invalid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();