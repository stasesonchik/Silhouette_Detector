import os
from uuid import uuid4
import cv2
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

TOKEN = "7594137884:AAHvigig7KcStYeVcubHrZ0Na4ftrfUyZT0"
input_dir = "/Users/stanislavmalarcuk/Desktop/videos/input"
output_dir = "/Users/stanislavmalarcuk/Desktop/videos/output"


async def main_menu(update_or_query, context):
    keyboard = [
        [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_action")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if isinstance(update_or_query, Update) and update_or_query.message:
        await update_or_query.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update_or_query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –ü–æ–¥–º–µ–Ω—é "–ò–Ω—Ñ–æ"
async def info_menu(query):
    keyboard = [
        [InlineKeyboardButton("ü§ñ –û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton("üë®‚Äçüíª –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö", callback_data="about_devs")],
        [InlineKeyboardButton("üìò –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about_project")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç:", reply_markup=reply_markup)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    match query.data:
        case "start_action":
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ 2 –º–∏–Ω—É—Ç.", reply_markup=reply_markup)

        case "info_menu":
            await info_menu(query)

        case "about_bot":
            await query.edit_message_text(
                text="ü§ñ –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –ø—Ä–æ–µ–∫—Ç–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="info_menu")]])
            )

        case "about_devs":
            await query.edit_message_text(
                text="üë®‚Äçüíª –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–º–∏ Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="info_menu")]])
            )

        case "about_project":
            await query.edit_message_text(
                text="üìò –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Telegram-–±–æ—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="info_menu")]])
            )

        case "go_back":
            await main_menu(query, context)

        case _:
            await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video = update.message.video

    if video.duration > 120:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ –¥–æ 2 –º–∏–Ω—É—Ç.")
        return

    os.makedirs(input_dir, exist_ok=True)  # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(output_dir, exist_ok=True)  # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è output, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f"{uuid4()}.mp4"
    full_path = os.path.join(input_dir, file_name)

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ –¥–∏—Å–∫
    file = await context.bot.get_file(video.file_id)
    await file.download_to_drive(full_path)

    await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ
    output_path = os.path.join(output_dir, "1.mp4")



    while (1):
        if (len(os.listdir(output_dir)) == 1):
            continue
        else:

            await send_video_to_user(update.effective_chat.id, output_path, context)
            break

    os.remove(output_path)
    os.remove(full_path)
async def send_video_to_user(chat_id: int, video_path: str, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ chat_id –∏ —É–¥–∞–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    if not os.path.isfile(video_path):
        print(f"–§–∞–π–ª {video_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(video_path, 'rb') as video_file:
            await context.bot.send_video(
                chat_id=chat_id,
                video=InputFile(video_file),
                caption="üé¨ –í–æ—Ç –≤–∞—à–µ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –≤–∏–¥–µ–æ:"
            )



    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")






# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))

    app.run_polling()
